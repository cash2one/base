# coding: utf8
import sys
from Crypto.Cipher import AES
from binascii import b2a_hex, a2b_hex
from .logger import *


class CouponIdCrypt():
    # 对整数id进行可逆混淆
    def encodeId(self, id):
        firstStr = str(id)[0:1]
        secondStr = str(id)[1:2]
        thirdStr = str(id)[2:3]
        forthStr = str(id)[3:4]
        fifthStr = str(id)[4:5]
        sixthStr = str(id)[5:6]
        seventhStr = str(id)[6:7]
        eighthStr = str(id)[7:8]
        ninththStr = str(id)[8:9]
        tenthStr = str(id)[9:10]
        eleventhStr = str(id)[10:11]
        twelfthStr = str(id)[11:12]
        thirteenthStr = str(id)[12:13]

        return str(thirdStr) + str(sixthStr) + str(secondStr) + str(thirteenthStr) + str(firstStr) + str(
                tenthStr) + str(seventhStr) + str(fifthStr) + str(forthStr) + str(eighthStr) + str(eleventhStr) + str(
                ninththStr) + str(twelfthStr)


    # 对通过encodeId混淆的id进行还原
    def decodeId(self, sid):
        if (str(sid).isdigit() == False):
            return ""

        sid = self.judge(str(sid), 13)

        firstStr = str(sid)[4:5]
        secondStr = str(sid)[2:3]
        thirdStr = str(sid)[0:1]
        forthStr = str(sid)[8:9]
        fifthStr = str(sid)[7:8]
        sixthStr = str(sid)[1:2]
        seventhStr = str(sid)[6:7]
        eighthStr = str(sid)[9:10]
        ninththStr = str(sid)[11:12]
        tenthStr = str(sid)[5:6]
        eleventhStr = str(sid)[10:11]
        twelfthStr = str(sid)[12:13]
        thirteenthStr = str(sid)[3:4]
        getcode = str(firstStr) + str(secondStr) + str(thirdStr) + str(forthStr) + str(fifthStr) + str(sixthStr) + str(
                seventhStr) + str(eighthStr) + str(ninththStr) + str(tenthStr) + str(eleventhStr) + str(twelfthStr) + str(
                thirteenthStr)
        return getcode


    def judge(self, value, length):
        currentValue = str(value)
        if (len(currentValue) < length):
            currentValue = '0' + currentValue
            self.judge(currentValue, length)
        return currentValue


class CryptManager():
    def __init__(self, key, vi=16 * '\0', mode=AES.MODE_CBC):
        self.key = self._pad(key)
        self.vi = vi
        self.mode = mode

    # 加密函数，如果text不是16的倍数【加密文本text必须为16的倍数！】，那就补足为16的倍数
    def encrypt(self, text):
        cryptor = AES.new(self.key, self.mode, self.vi)

        self.ciphertext = cryptor.encrypt(self._pad(text))
        # 因为AES加密时候得到的字符串不一定是ascii字符集的，输出到终端或者保存时候可能存在问题
        # 所以这里统一把加密后的字符串转化为16进制字符串
        return b2a_hex(self.ciphertext)

    # 这里密钥key长度必须为16（AES-128）、24（AES-192）、或32（AES-256）Bytes 长度.目前AES-128足够用
    # 加密的文本长度也必须是16的倍数
    def _pad(self, text):
        length = 16
        count = len(text)
        add = length - (count % length)
        text = text + ('\0' * add)
        return text

    # 解密后，去掉补足的空格用strip() 去掉
    def decrypt(self, text):
        logging.info('text---->' + text)
        cryptor = AES.new(self.key, self.mode, 16 * '\0')
        plain_text = cryptor.decrypt(a2b_hex(text))
        return plain_text.decode('utf-8').rstrip('\0')


if __name__ == '__main__':
    cm = CryptManager('voncytel')  # 初始化密钥
    e = cm.encrypt("Seq=736000004&Request=TicketPrice&Ticket=0218.0537.0001.00")
    d = cm.decrypt(e)
    print(e, d)
